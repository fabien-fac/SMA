import classes.Position
import interfaces.IActionsAgent
import interfaces.IControl
import interfaces.ICreateAgent
import interfaces.ICreateAgentAvecProxy
import interfaces.ICreateLogger
import interfaces.ICreateProxyAgent
import interfaces.IDemandeActionsAgent
import interfaces.IGestionLogger
import interfaces.IGetAgent
import interfaces.IInfos
import interfaces.IInfosAgents
import interfaces.IInfosGetLog
import interfaces.IInfosSetLog
import interfaces.IPercevoir
import interfaces.ISignalLog

namespace SMA {

	ecosystem Agents {

		provides createElement: ICreateAgent
		provides getElement: IGetAgent

		species Agent(nom: String, position: Position, couleur: String) {
			provides infosAgent: IInfos
			provides actionsAgent: IActionsAgent
			requires percevoirAgent: IPercevoir
			requires demandeAction: IDemandeActionsAgent
		}
	}
	
	ecosystem ProxysAgent {
		
		provides createProxyAgent: ICreateProxyAgent
		requires percevoirProxy: IPercevoir
		requires demandeActionFromProxy: IDemandeActionsAgent
		
		species ProxyAgent(nomAgent: String){
			provides percevoirProxySpecy: IPercevoir
			provides demandeActionProxySpecy: IDemandeActionsAgent
		}
	}
	
	ecosystem AgentsAvecProxyEcosystem {
		
		provides infosSurAgents: IInfosAgents
		provides actionsAgentsProxy: IActionsAgent
		provides createAgentAvecProxy: ICreateAgentAvecProxy
		requires percevoirAP: IPercevoir
		requires demandeActionAP: IDemandeActionsAgent
		
		part proxys: ProxysAgent{
			bind percevoirProxy to percevoirAP
			bind demandeActionFromProxy to demandeActionAP
		}
		
		part agents: Agents
		
		species AgentAvecProxy(nom: String, position: Position, couleur: String){
			use proxy: proxys.ProxyAgent(nom)
			use agent: agents.Agent(nom, position, couleur){
				bind percevoirAgent to proxy.percevoirProxySpecy
				bind demandeAction to proxy.demandeActionProxySpecy
			}
		}
	}
	
	ecosystem LogDispatcherEcosystem {
		
		provides signalLog: ISignalLog
		provides createLogger: ICreateLogger
		requires logsEntrant: IInfosGetLog
		
		species ProxyLog(destinatairLog: IInfosSetLog){
			requires logsSortant: IInfosSetLog
		}
		
	}

	component Logger {
		provides log: IInfosSetLog
	}
	
	component System {
		provides perceptionSystem : IPercevoir
		provides control: IControl
		provides infosLog: IInfosGetLog
		provides actionsSurAgent: IDemandeActionsAgent
		requires createAgents: ICreateAgentAvecProxy
		requires actionsSurAgents: IActionsAgent
		
		requires signalLog: ISignalLog 
	}
	
	component IHM {
		provides infosLog: IInfosSetLog
		requires controlIHM: IControl
	}
	
	component BigComponent {
		provides control: IControl
		provides gestionLogger: IGestionLogger
		
		part system: System{
			bind createAgents to agents.createAgentAvecProxy
			bind actionsSurAgents to agents.actionsAgentsProxy
			bind signalLog to logDispatcher.signalLog
		}
		
		part agents : AgentsAvecProxyEcosystem{
			bind percevoirAP to system.perceptionSystem
			bind demandeActionAP to system.actionsSurAgent
		}
		
		part logDispatcher: LogDispatcherEcosystem{
			bind logsEntrant to system.infosLog
		}
		
		part ihm : IHM{
			bind controlIHM to system.control
		}
		
	}
	

}